#include <stdint.h>
#include <string>
#include <memory>
#include <jni.h>
#include <iostream>

#include "processor.h"
#include "mmu.h"
#include "simif.h"
#include "type.h"



#ifdef __cplusplus
extern "C" {
#endif
#include <stdio.h>
#include <stdint.h>



#define API __attribute__((visibility("default")))

jclass userDataClass;
jmethodID methodId;

JNIEXPORT jlong JNICALL Java_riscv_model_Model_newHandle
  (JNIEnv * env, jobject obj, jstring name, jint seedValue){

    simif_t *wrap;
    FILE *fptr = NULL;
    std::ofstream outfile ("/dev/null",std::ofstream::binary);
    auto proc = new processor_t("RV32IMA", "MSU", "", wrap, 0, false, fptr, outfile);
//    proc->set_impl(IMPL_MMU_SV32, XLEN == 32);
//    proc->set_impl(IMPL_MMU_SV39, XLEN == 64);
//    proc->set_impl(IMPL_MMU_SV48, false);
//    proc->set_impl(IMPL_MMU, true);


  if(userDataClass == 0){
    userDataClass=env->GetObjectClass(obj);
    methodId=env->GetMethodID(userDataClass, "miaou", "()J");
  }

//    jlong result = (jlong)env->CallNonvirtualLongMethod(obj, userDataClass, methodId);
  jlong result = (jlong)env->CallObjectMethod(obj, methodId);
    return result;
//    return 42;
}

#ifdef __cplusplus
}
#endif
